// main.js
function FillSeriesList() {
    fetch('/lab7/rest-api/series/')
        .then(response => response.json())
        .then(data => {
            const series = data.series;

            let tbody = document.getElementById('series-list');
            tbody.innerHTML = '';

            series.forEach(seriesItem => {
                let tr = document.createElement('tr');


                let tdTitleRus = document.createElement('td');
                tdTitleRus.innerText = seriesItem.title_ru || 'N/A';

                let tdTitle = document.createElement('td');
                tdTitle.classList.add('italic'); 
                tdTitle.innerHTML = seriesItem.title
                    ? `(${seriesItem.title})` 
                    : '(N/A)'; 

    
                let tdYear = document.createElement('td');
                tdYear.innerText = seriesItem.year || 'N/A';

              
                let tdActions = document.createElement('td');
                let editButton = document.createElement('button');
                editButton.innerText = 'редактировать';
                editButton.onclick = function () {
                    editSeries(seriesItem);
                };

                let deleteButton = document.createElement('button');
                deleteButton.innerText = 'удалить';
                deleteButton.onclick = function () {
                    deleteSeries(seriesItem.id);
                };

                tdActions.append(editButton, deleteButton);

                tr.append(tdTitleRus, tdTitle, tdYear, tdActions);
                tbody.append(tr);
            });
        })
        .catch(error => console.error('Error fetching series:', error));
}
function deleteSeries(id) {
    if (!confirm('Вы точно хотите удалить сериал?')) return;

    fetch(`/lab7/rest-api/series/${id}`, { method: 'DELETE' })
        .then(response => {
            if (!response.ok) throw new Error('Ошибка при удалении сериала');
            FillSeriesList();
        })
        .catch(error => console.error('Error deleting series:', error));
}

function showModal() {
    document.querySelector('.modal').style.display = 'block';
    document.getElementById('id').value = '';
    document.getElementById('title').value = '';
    document.getElementById('title-ru').value = '';
    document.getElementById('year').value = '';
    document.getElementById('description').value = '';
    document.getElementById('description-error').textContent = ''; 
}

function hideModal() {
    document.querySelector('.modal').style.display = 'none';
}

function cancel() {
    hideModal();
}

function addSeries() {
    showModal();
}

function sendSeries() {
    const id = document.getElementById('id').value;
    const descriptionField = document.getElementById('description');
    const descriptionError = document.getElementById('description-error');

    const series = {
        title: document.getElementById('title').value,
        title_ru: document.getElementById('title-ru').value,
        year: document.getElementById('year').value,
        description: descriptionField.value.trim(),
    };

    if (!series.description) {
        descriptionError.textContent = 'Описание сериала обязательно для заполнения!';
        descriptionField.style.border = '2px solid red';
        return;
    }

    descriptionError.textContent = '';
    descriptionField.style.border = '';

    const url = id ? `/lab7/rest-api/series/${id}` : '/lab7/rest-api/series/';
    const method = id ? 'PUT' : 'POST';

    fetch(url, {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(series),
    })
        .then(response => {
            if (!response.ok) throw new Error('Ошибка при добавлении/редактировании сериала');
            FillSeriesList();
            hideModal();
        })
        .catch(error => {
            console.error('Error sending series:', error);
            alert('Не удалось выполнить действие. Попробуйте снова.');
        });
}

function editSeries(series) {
    showModal();
    document.getElementById('id').value = series.id;
    document.getElementById('title').value = series.title;
    document.getElementById('title-ru').value = series.title_ru;
    document.getElementById('year').value = series.year;
    document.getElementById('description').value = series.description;
}



<!-- index.html -->
{% extends "base.html" %}

{% block lab %}
Лабораторная работа-7
{% endblock %}

{% block script %}
<script src="{{ url_for('static', filename='lab7/main.js') }}"></script>
{% endblock %}

{% block content %}
<style>
    body {
        background-color: #00274d;
        color: white;
        font-family: Arial, sans-serif;
    }
    table {
        width: 100%;
        margin: 20px 0;
        border-collapse: collapse;
    }
    th, td {
        padding: 10px;
        text-align: left;
        border: 1px solid #ffffff;
    }
    th {
        background-color: #004080;
    }
    td.italic {
        font-style: italic;
        color: #bbbbbb;
    }
    footer, header {
        background-color: #00274d;
    }
    button {
        background-color: #ffc0cb;
        border: none;
        padding: 10px 15px;
        margin: 5px;
        cursor: pointer;
        border-radius: 5px;
        font-size: 14px;
        font-weight: bold;
    }
    button:hover {
        background-color: #ff99aa;
    }
    .modal {
        z-index: 100;
        box-shadow: 3px 3px 5px black;
        background: rgb(208, 163, 186);
        width: 600px;
        color: #00274d;
        left: 50%;
        top: 220px;
        margin-left: -300px;
        position: absolute;
        padding: 20px;
        font-weight: bold;
        display: none;
        flex-direction: column;
        gap: 20px;
        font-size: 15px;
        border-radius: 10px;
    }
    .modal label {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        width: 100%;
        margin-bottom: 10px;
    }
    .modal input, .modal textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    .error-message {
        color: red;
        font-size: 14px;
    }
    td.italic {
        font-style: italic;
        color: #bbbbbb;
    }
</style>

<h1>Список сериалов</h1>

<table>
    <thead>
        <tr>
            <th>Название (рус)</th>
            <th>Оригинальное название</th>
            <th>Год</th>
            <th>Действие</th>
        </tr>
    </thead>
    <tbody id="series-list"></tbody>
</table>

<div>
    <button onclick="addSeries()">Добавить сериал</button>
</div>

<div class="modal">
    <input type="hidden" id="id">
    <label>Название сериала на русском: <input type="text" id="title-ru"></label>
    <label>Название сериала на оригинальном языке (если русский, оставьте пустым): <input type="text" id="title"></label>
    <label>Год выпуска: <input type="number" id="year"></label>
    <label>Описание: 
        <textarea id="description"></textarea>
    </label>
    <div id="description-error" class="error-message"></div>
    <div class="button-container">
        <button onclick="sendSeries()">OK</button>
        <button onclick="cancel()">Отмена</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        FillSeriesList();
    });
</script>
{% endblock %}



 lab7.py
from flask import Blueprint, render_template, request, jsonify

lab7 = Blueprint('lab7', __name__)

@lab7.route('/lab7/')
def main():
    return render_template('lab7/index.html')

series = [
    {
        "title": "Lost",
        "title_ru": "Остаться вживых",
        "year": "2004–2010",
        "description": "Красавец-лайнер, совершающий полет из Сиднея в Лос-Анджелес...",
    },
    {
        "title": "Grotesquerie",
        "title_ru": "Гротеск",
        "year": "2024",
        "description": "Сестра Меган и детектив Лоис Трион расследуют серию...",
    }
]

@lab7.route('/lab7/rest-api/series/', methods=['GET'])
def get_series():
    return jsonify({"series": [{"id": idx, **item} for idx, item in enumerate(series)]})

@lab7.route('/lab7/rest-api/series/<int:id>', methods=['DELETE'])
def delete_series(id):
    if 0 <= id < len(series):
        del series[id]
        return '', 204
    return jsonify({"error": "Series not found"}), 404

@lab7.route('/lab7/rest-api/series/', methods=['POST'])
def add_series():
    new_series = request.get_json()
    if not all(key in new_series for key in ["title_ru", "year", "description"]):
        return jsonify({"error": "Invalid data"}), 400
    if not new_series.get("title"): 
        new_series["title"] = new_series["title_ru"] # самостоятельное задание: копируем русское название, если оригинальное пустое
    series.append(new_series)
    return jsonify({"id": len(series) - 1}), 201

@lab7.route('/lab7/rest-api/series/<int:id>', methods=['PUT'])
def update_series(id):
    if id < 0 or id >= len(series):
        return jsonify({"error": "Series not found"}), 404
    updated_series = request.get_json()
    if not all(key in updated_series for key in ["title_ru", "year", "description"]):
        return jsonify({"error": "Invalid data"}), 400
    if not updated_series.get("title"):
        updated_series["title"] = updated_series["title_ru"] # самостоятельное задание: копируем русское название, если оригинальное пустое
    series[id] = updated_series
    return jsonify(series[id]), 200

deactivate
venv\Scripts\activate
pip install flask-sqlalchemy --upgrade



CREATE USER nastya_kicenko2_orm WITH PASSWORD '123';

cd Web-labs2
touch nastya_kicenko2_orm.db

\c nastya_kicenko2_orm